// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Otobur.Data;

#nullable disable

namespace Otobur.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250626111217_EditFix")]
    partial class EditFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Aksesyon", b =>
                {
                    b.Property<string>("AksesyonNumarasi")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("BitkininAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Koken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Koordinat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KullaniciAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KullaniciKodu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KullaniciNumarasi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lokasyon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MateryalCesidi")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ToplanmaTarihi")
                        .HasColumnType("datetime2");

                    b.HasKey("AksesyonNumarasi");

                    b.ToTable("Aksesyonlar");

                    b.HasData(
                        new
                        {
                            AksesyonNumarasi = "2023-00345",
                            BitkininAdi = "Pinus pinea",
                            Koken = "Kültür; Köken bilinmiyor",
                            Koordinat = "-",
                            KullaniciAdi = "-",
                            KullaniciKodu = "-",
                            KullaniciNumarasi = "-",
                            Lokasyon = "-",
                            MateryalCesidi = 0,
                            ToplanmaTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AksesyonNumarasi = "2023-00346",
                            BitkininAdi = "Cedrus libani",
                            Koken = "Köken bilgisi yok",
                            Koordinat = "-",
                            KullaniciAdi = "-",
                            KullaniciKodu = "-",
                            KullaniciNumarasi = "-",
                            Lokasyon = "-",
                            MateryalCesidi = 0,
                            ToplanmaTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AksesyonNumarasi = "2023-00347",
                            BitkininAdi = "Aethionema turcica",
                            Koken = "Doğal",
                            Koordinat = "39°52'45.34'' K - 32°15'43.45'' D",
                            KullaniciAdi = "Asil Güner",
                            KullaniciKodu = "AG",
                            KullaniciNumarasi = "12321",
                            Lokasyon = "Ankara; Beypazarı, Çakal gölü, 1750 m",
                            MateryalCesidi = 4,
                            ToplanmaTarihi = new DateTime(2025, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AksesyonNumarasi = "2023-00348",
                            BitkininAdi = "Cota tinctoria",
                            Koken = "Kültür; Köken Biliniyor",
                            Koordinat = "-",
                            KullaniciAdi = "-",
                            KullaniciKodu = "-",
                            KullaniciNumarasi = "-",
                            Lokasyon = "-",
                            MateryalCesidi = 4,
                            ToplanmaTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AksesyonNumarasi = "2023-00349",
                            BitkininAdi = "Mespilus germanica",
                            Koken = "Kültür; Köken Biliniyor",
                            Koordinat = "-",
                            KullaniciAdi = "-",
                            KullaniciKodu = "-",
                            KullaniciNumarasi = "-",
                            Lokasyon = "-",
                            MateryalCesidi = 5,
                            ToplanmaTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AksesyonNumarasi = "2023-00350",
                            BitkininAdi = "Malus sylvestris",
                            Koken = "Kültür; Köken Biliniyor",
                            Koordinat = "-",
                            KullaniciAdi = "-",
                            KullaniciKodu = "-",
                            KullaniciNumarasi = "-",
                            Lokasyon = "-",
                            MateryalCesidi = 0,
                            ToplanmaTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AksesyonNumarasi = "2023-00351",
                            BitkininAdi = "Aucuba japonica",
                            Koken = "Kültür; Köken Biliniyor",
                            Koordinat = "-",
                            KullaniciAdi = "-",
                            KullaniciKodu = "-",
                            KullaniciNumarasi = "-",
                            Lokasyon = "-",
                            MateryalCesidi = 5,
                            ToplanmaTarihi = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AksesyonNumarasi = "2023-00352",
                            BitkininAdi = "Pelargonium quercetorum",
                            Koken = "Doğal",
                            Koordinat = "41°12'32.12'' K - 38°34'26.87'' D",
                            KullaniciAdi = "Salih Sercan Kanoğlu",
                            KullaniciKodu = "SKNG",
                            KullaniciNumarasi = "4532",
                            Lokasyon = "Bitlis; Tatvan, Demir Dağı, 1350 m",
                            MateryalCesidi = 4,
                            ToplanmaTarihi = new DateTime(2022, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AksesyonNumarasi = "2023-00353",
                            BitkininAdi = "Flueggea anatolica",
                            Koken = "Doğal",
                            Koordinat = "37°24'33.01'' K - 34°23'24.53'' D",
                            KullaniciAdi = "Mahmut Can",
                            KullaniciKodu = "MCAN",
                            KullaniciNumarasi = "2345",
                            Lokasyon = "Mersin; Kadıncık Vadisi, 455 m",
                            MateryalCesidi = 4,
                            ToplanmaTarihi = new DateTime(2023, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AksesyonNumarasi = "2023-00354",
                            BitkininAdi = "Thermopsis turcica",
                            Koken = "Doğal",
                            Koordinat = "39°23'13.45'' K - 31°23'15.42'' D",
                            KullaniciAdi = "Birol Sever",
                            KullaniciKodu = "BRLS",
                            KullaniciNumarasi = "6754",
                            Lokasyon = "Konya; Eber Gölü çevresi, 876 m",
                            MateryalCesidi = 4,
                            ToplanmaTarihi = new DateTime(2025, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AksesyonNumarasi = "2023-00355",
                            BitkininAdi = "Crocus biflorus",
                            Koken = "Doğal",
                            Koordinat = "39°12'23.44'' K - 39°34'32.44'' D",
                            KullaniciAdi = "Emrah Çelik",
                            KullaniciKodu = "ECLK",
                            KullaniciNumarasi = "1201",
                            Lokasyon = "Erzincan; Keşiş Dağı, 1786 m",
                            MateryalCesidi = 1,
                            ToplanmaTarihi = new DateTime(2022, 12, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("BitkiDurum", b =>
                {
                    b.Property<string>("AksesyonNumarasi")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("BahcedeBulunduguYer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BitkininDurumu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gozlem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("GozlemTarihi")
                        .HasColumnType("datetime2");

                    b.Property<string>("VejetasyonDurumu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YerKodu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AksesyonNumarasi");

                    b.ToTable("BitkiDurumu");

                    b.HasData(
                        new
                        {
                            AksesyonNumarasi = "2023-00345",
                            BahcedeBulunduguYer = "Merkez Ada; Üst Gölet Alanı",
                            BitkininDurumu = "İyi",
                            Gozlem = "-",
                            GozlemTarihi = new DateTime(2025, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VejetasyonDurumu = "Yapraklı",
                            YerKodu = "1-ÜG"
                        },
                        new
                        {
                            AksesyonNumarasi = "2023-00346",
                            BahcedeBulunduguYer = "Ertuğrul Adası; Bataklık Bölümü",
                            BitkininDurumu = "Mükemmel",
                            Gozlem = "-",
                            GozlemTarihi = new DateTime(2025, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VejetasyonDurumu = "Yapraklı ve Kozalak Oluşumu Başlamış",
                            YerKodu = "2-BB"
                        },
                        new
                        {
                            AksesyonNumarasi = "2023-00350",
                            BahcedeBulunduguYer = "Trakya Adası; Meyve Bahçesi",
                            BitkininDurumu = "Vasat",
                            Gozlem = "Yapraklarda buruşukluk hastalığı gözlendi, DECIS ilacı uygulandı",
                            GozlemTarihi = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            VejetasyonDurumu = "Yapraklı ve Çiçekli",
                            YerKodu = "8-MB"
                        });
                });

            modelBuilder.Entity("Herbaryum", b =>
                {
                    b.Property<int>("HerbaryumNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HerbaryumNo"));

                    b.Property<string>("AksesyonNumarasi")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("BitkininAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fotograf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Koordinat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KullaniciAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KullaniciKodu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KullaniciNumarasi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lokasyon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HerbaryumNo");

                    b.HasIndex("AksesyonNumarasi");

                    b.ToTable("HerbaryumDefteri");

                    b.HasData(
                        new
                        {
                            HerbaryumNo = 345,
                            AksesyonNumarasi = "2023-00354",
                            BitkininAdi = "Thermopsis turcica",
                            Fotograf = "Var",
                            Koordinat = "39°23'12,54'' K - 25°34'34,32'' D",
                            KullaniciAdi = "Birol Sever",
                            KullaniciKodu = "BRLS",
                            KullaniciNumarasi = "6754",
                            Lokasyon = "Konya; Eber Gölü çevresi, 876 m."
                        },
                        new
                        {
                            HerbaryumNo = 234,
                            AksesyonNumarasi = "2023-00355",
                            BitkininAdi = "Crocus biflorus",
                            Fotograf = "Var",
                            Koordinat = "39°21'23,34'' K - 34°32'34,44'' D",
                            KullaniciAdi = "Emrah Çelik",
                            KullaniciKodu = "ECLK",
                            KullaniciNumarasi = "1201",
                            Lokasyon = "Erzincan; Keşiş Dağı, 1786 m."
                        },
                        new
                        {
                            HerbaryumNo = 123,
                            AksesyonNumarasi = "2023-00350",
                            BitkininAdi = "Malus sylvestris",
                            Fotograf = "Yok",
                            Koordinat = "-",
                            KullaniciAdi = "Bahçe Örneği",
                            KullaniciKodu = "-",
                            KullaniciNumarasi = "-",
                            Lokasyon = "-"
                        },
                        new
                        {
                            HerbaryumNo = 456,
                            AksesyonNumarasi = "2023-00347",
                            BitkininAdi = "Aethionema turcica",
                            Fotograf = "Var",
                            Koordinat = "36°52'45,34'' K - 23°15'34,45'' D",
                            KullaniciAdi = "Adil Güner",
                            KullaniciKodu = "AG",
                            KullaniciNumarasi = "12321",
                            Lokasyon = "Ankara; Beypazarı, Çakal gölü, 1750 m."
                        });
                });

            modelBuilder.Entity("Kullanici", b =>
                {
                    b.Property<string>("KullaniciNumarasi")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Eposta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GorebilecegiTablolar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("KayitSilebilme")
                        .HasColumnType("bit");

                    b.Property<string>("KayitYapabilecegiTablolar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KullaniciAdi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KullaniciGrubu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KullaniciKodu")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parola")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KullaniciNumarasi");

                    b.ToTable("Kullanicilar");

                    b.HasData(
                        new
                        {
                            KullaniciNumarasi = "1",
                            Eposta = "",
                            GorebilecegiTablolar = "Tüm Tablolar",
                            KayitSilebilme = true,
                            KayitYapabilecegiTablolar = "Tüm Tablolar",
                            KullaniciAdi = "Salih Kanoğlu",
                            KullaniciGrubu = "Sistem Yöneticisi",
                            KullaniciKodu = "",
                            Parola = "1234",
                            Telefon = ""
                        },
                        new
                        {
                            KullaniciNumarasi = "2",
                            Eposta = "",
                            GorebilecegiTablolar = "Toplayıcı Defteri, Herbaryum Tablosu",
                            KayitSilebilme = false,
                            KayitYapabilecegiTablolar = "Toplayıcı Defteri, Herbaryum Tablosu",
                            KullaniciAdi = "Adil Güner",
                            KullaniciGrubu = "Normal Kullanıcı",
                            KullaniciKodu = "",
                            Parola = "5678",
                            Telefon = ""
                        },
                        new
                        {
                            KullaniciNumarasi = "3",
                            Eposta = "",
                            GorebilecegiTablolar = "Aksesyon Tablosu, Tohum Bankası Tablosu, Bitki Durum Tablosu",
                            KayitSilebilme = false,
                            KayitYapabilecegiTablolar = "Aksesyon Tablosu, Tohum Bankası Tablosu, Bitki Durum Tablosu",
                            KullaniciAdi = "Ali Çelik",
                            KullaniciGrubu = "Normal Kullanıcı",
                            KullaniciKodu = "",
                            Parola = "9876",
                            Telefon = ""
                        },
                        new
                        {
                            KullaniciNumarasi = "4",
                            Eposta = "",
                            GorebilecegiTablolar = "Sadece Kayıtları Görebilir",
                            KayitSilebilme = false,
                            KayitYapabilecegiTablolar = "Kayıt Yapamaz",
                            KullaniciAdi = "Osman Tek",
                            KullaniciGrubu = "Eğitimde",
                            KullaniciKodu = "",
                            Parola = "2468",
                            Telefon = ""
                        });
                });

            modelBuilder.Entity("TohumBankasi", b =>
                {
                    b.Property<string>("AksesyonNumarasi")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("BulunduguDolap")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Miktar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AksesyonNumarasi");

                    b.ToTable("TohumBankasi");

                    b.HasData(
                        new
                        {
                            AksesyonNumarasi = "2023-00347",
                            BulunduguDolap = "1A3",
                            Miktar = "1 küçük şişe (30cl)"
                        },
                        new
                        {
                            AksesyonNumarasi = "2023-00348",
                            BulunduguDolap = "2B4",
                            Miktar = "1 küçük şişe (30cl), 1 büyük şişe (100cl)"
                        },
                        new
                        {
                            AksesyonNumarasi = "2023-00352",
                            BulunduguDolap = "3A2",
                            Miktar = "1 orta şişe (50 cl)"
                        },
                        new
                        {
                            AksesyonNumarasi = "2023-00353",
                            BulunduguDolap = "2D3",
                            Miktar = "1 büyük şişe (100 cl)"
                        },
                        new
                        {
                            AksesyonNumarasi = "2023-00354",
                            BulunduguDolap = "1A2",
                            Miktar = "1 orta şişe (50 cl), 2 büyük şişe (100 cl)"
                        });
                });

            modelBuilder.Entity("BitkiDurum", b =>
                {
                    b.HasOne("Aksesyon", "Aksesyon")
                        .WithOne("BitkiDurum")
                        .HasForeignKey("BitkiDurum", "AksesyonNumarasi")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aksesyon");
                });

            modelBuilder.Entity("Herbaryum", b =>
                {
                    b.HasOne("Aksesyon", "Aksesyon")
                        .WithMany()
                        .HasForeignKey("AksesyonNumarasi")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aksesyon");
                });

            modelBuilder.Entity("TohumBankasi", b =>
                {
                    b.HasOne("Aksesyon", "Aksesyon")
                        .WithOne("TohumBankasi")
                        .HasForeignKey("TohumBankasi", "AksesyonNumarasi")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Aksesyon");
                });

            modelBuilder.Entity("Aksesyon", b =>
                {
                    b.Navigation("BitkiDurum")
                        .IsRequired();

                    b.Navigation("TohumBankasi")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
